name: ML Pipeline - Train, Test & Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # manual trigger

env:
  PYTHON_VERSION: '3.10'
  MLFLOW_TRACKING_URI: ${{ secrets.MLFLOW_TRACKING_URI }}

jobs:
  # 1️⃣ Code Quality
  code-quality:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          pip install flake8 black pylint
          pip install -r requirements.txt
      - name: Run Black formatter check
        run: black --check .
        continue-on-error: true
      - name: Run Flake8
        run: flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        continue-on-error: true

  # 2️⃣ Unit Tests
  unit-tests:
    runs-on: ubuntu-latest
    needs: code-quality
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-cov
      - name: Run unit tests
        run: pytest tests/ -v --cov=src --cov-report=xml
      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests

  # 3️⃣ Model Training
  train-model:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Create directories for artifacts
        run: |
          mkdir -p models
          mkdir -p metrics
      - name: Train model
        env:
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
        run: python -m src.train
      - name: Upload model artifacts
        uses: actions/upload-artifact@v4
        with:
          name: trained-model
          path: |
            models/
            metrics/
          retention-days: 30

  # 4️⃣ Model Evaluation
  evaluate-model:
    runs-on: ubuntu-latest
    needs: train-model
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: pip install -r requirements.txt
      - name: Download model artifacts
        uses: actions/download-artifact@v4
        with:
          name: trained-model
      - name: Run model evaluation tests
        run: pytest tests/test_model_performance.py -v

  # 5️⃣ Model Deployment (only on main branch)
  deploy-model:
    runs-on: ubuntu-latest
    needs: evaluate-model
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install dependencies
        run: pip install -r requirements.txt mlflow
      - name: Download model artifacts
        uses: actions/download-artifact@v4
        with:
          name: trained-model
      - name: Deploy to MLflow Model Registry
        env:
          MLFLOW_TRACKING_URI: ${{ env.MLFLOW_TRACKING_URI }}
        run: |
          python scripts/deploy_model.py || echo "Add your deploy logic here"
      - name: Tag deployment
        run: |
          git tag -a "model-v$(date +%Y%m%d-%H%M%S)" -m "Model deployment"
          git push origin --tags

  # 6️⃣ Notification
  notify:
    runs-on: ubuntu-latest
    needs: [train-model, evaluate-model, deploy-model]
    if: always()
    steps:
      - name: Send email notification
        uses: dawidd6/action-send-mail@v3
        with:
          server_address: smtp.gmail.com
          server_port: 465
          username: ${{ secrets.EMAIL_USERNAME }}
          password: ${{ secrets.EMAIL_PASSWORD }}
          subject: "ML Pipeline Status: ${{ job.status }}"
          to: "yashrajsharma231195@gmail.com"
          from: "yashrajsharma231195@gmail.com"
          body: "Pipeline finished. Status: ${{ job.status }}"